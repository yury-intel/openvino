name: PyTorch Models tests

on:
  workflow_call:
    inputs:
      runner:
        description: 'Machine on which the tests would run'
        type: string
        required: true
      container:
        description: 'JSON to be converted to the value of the "container" configuration for the job'
        type: string
        required: false
        default: '{"image": null}'
      event:
        description: 'Event that triggered the workflow. E.g., "schedule" for nightly runs'
        type: string
        required: true

permissions: read-all

jobs:
  PyTorch_Models_Tests:
    name: PyTorch Models tests
    timeout-minutes: ${{ inputs.event == 'schedule' && 400 || 30 }}
    runs-on: ${{ inputs.runner }}
    container: ${{ fromJSON(inputs.container) }}
    defaults:
      run:
        shell: bash
    env:
      DEBIAN_FRONTEND: noninteractive # to prevent apt-get from waiting user input
      OPENVINO_REPO: ${{ github.workspace }}/openvino
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests
      MODEL_HUB_TESTS_INSTALL_DIR: ${{ github.workspace }}/install/tests/model_hub_tests
    steps:
      - name: Check sudo
        if: ${{ runner.os == 'Linux' }}
        run: if [ "$(id -u)" -eq 0 ]; then apt update && apt --assume-yes install sudo; fi

      - name: Set apt retries
        if: runner.os == 'Linux'
        run: |
          if [ "$(id -u)" -eq 0 ]; then
            echo 'Acquire::Retries "10";' > /etc/apt/apt.conf.d/80-retries
          else
            sudo sh -c "echo 'Acquire::Retries \"10\";' >> /etc/apt/apt.conf.d/80-retries"
          fi

      - name: Download OpenVINO package
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tokenizers extension
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: openvino_tokenizers_wheel
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      # Needed as ${{ github.workspace }} is not working correctly when using Docker
      - name: Setup Variables
        run: |
          echo "OPENVINO_REPO=$GITHUB_WORKSPACE/openvino" >> "$GITHUB_ENV"
          echo "INSTALL_DIR=$GITHUB_WORKSPACE/install" >> "$GITHUB_ENV"
          echo "INSTALL_TEST_DIR=$GITHUB_WORKSPACE/install/tests" >> "$GITHUB_ENV"
          echo "MODEL_HUB_TESTS_INSTALL_DIR=$GITHUB_WORKSPACE/install/tests/model_hub_tests" >> "$GITHUB_ENV"

      - name: Extract OpenVINO packages
        run: |
          pushd ${INSTALL_DIR}
            tar -xzf openvino_package.tar.gz -C ${INSTALL_DIR}
          popd

          pushd ${INSTALL_TEST_DIR}
            tar -xzf openvino_tests.tar.gz -C ${INSTALL_DIR}
          popd

      - name: Fetch setup_python action
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          sparse-checkout: |
            .github/actions/setup_python/action.yml
          sparse-checkout-cone-mode: false
          path: 'openvino'

      - name: Install dependencies
        if: ${{ runner.os == 'Linux' }}
        run: |
          # install git (required to build pip deps from the sources)
          # install 'g++' to build 'detectron2' and 'natten' wheels
          sudo apt-get install --assume-yes --no-install-recommends g++ git ca-certificates

      - name: Setup Python 3.11
        uses: ./openvino/.github/actions/setup_python
        with:
          version: '3.11'
          should-setup-pip-paths: 'false'
          self-hosted-runner: ${{ contains(inputs.runner, 'aks') }}

      - name: Install OpenVINO Python wheels
        run: |
          # To enable pytest parallel features
          python3 -m pip install pytest-xdist[psutil]
          python3 -m pip install ${INSTALL_DIR}/tools/openvino-*
          python3 -m pip install ${INSTALL_DIR}/openvino_tokenizers-*

      - name: Install PyTorch tests requirements
        run: |
          python3 -m pip install -r ${MODEL_HUB_TESTS_INSTALL_DIR}/pytorch/requirements.txt
          python3 -m pip install -r ${MODEL_HUB_TESTS_INSTALL_DIR}/pytorch/requirements_secondary.txt
          echo "Available storage:"
          df -h
        env:
          CPLUS_INCLUDE_PATH: ${{ env.Python_ROOT_DIR }}/include/python${{ env.PYTHON_VERSION }}

      - name: PyTorch Models Tests Timm and Torchvision
        run: |
          export PYTHONPATH=${MODEL_HUB_TESTS_INSTALL_DIR}:$PYTHONPATH
          python3 -m pytest ${MODEL_HUB_TESTS_INSTALL_DIR}/pytorch/ -m ${TYPE} --html=${INSTALL_TEST_DIR}/TEST-torch_model_timm_tv_tests.html --self-contained-html -v -n 4 -k "TestTimmConvertModel or TestTorchHubConvertModel"
        env:
          TYPE: ${{ inputs.event == 'schedule' && 'nightly' || 'precommit'}}
          TEST_DEVICE: CPU
          OP_REPORT_FILE: ${{ env.INSTALL_TEST_DIR }}/TEST-torch_unsupported_ops.log

      - name: PyTorch Models Tests Not Timm or Torchvision
        if: always()
        run: |
          export PYTHONPATH=${MODEL_HUB_TESTS_INSTALL_DIR}:$PYTHONPATH
          python3 -m pytest ${MODEL_HUB_TESTS_INSTALL_DIR}/pytorch -m ${TYPE} --html=${INSTALL_TEST_DIR}/TEST-torch_model_tests.html --self-contained-html -v -k "not (TestTimmConvertModel or TestTorchHubConvertModel)"
        env:
          TYPE: ${{ inputs.event == 'schedule' && 'nightly' || 'precommit'}}
          TEST_DEVICE: CPU
          USE_SYSTEM_CACHE: False
          OP_REPORT_FILE: ${{ env.INSTALL_TEST_DIR }}/TEST-torch_unsupported_ops.log

      - name: PagedAttention Test
        if: always()
        run: |
          export PYTHONPATH=${MODEL_HUB_TESTS_INSTALL_DIR}:$PYTHONPATH
          python3 -m pytest ${MODEL_HUB_TESTS_INSTALL_DIR}/pytorch/test_pa_transformation.py -m ${TYPE} --html=${INSTALL_TEST_DIR}/TEST-torch_pagedattention_tests.html --self-contained-html -v --tb=short
        env:
          TYPE: ${{ inputs.event == 'schedule' && 'nightly' || 'precommit'}}
          TEST_DEVICE: CPU
          USE_SYSTEM_CACHE: False
          OP_REPORT_FILE: ${{ env.INSTALL_TEST_DIR }}/TEST-torch_unsupported_ops.log

      - name: Reformat unsupported ops file
        if: '!cancelled()'
        run: |
          python3 ${MODEL_HUB_TESTS_INSTALL_DIR}/pytorch/scripts/process_op_report.py ${INSTALL_TEST_DIR}/TEST-torch_unsupported_ops.log

      - name: Available storage after tests
        run: |
          echo "Available storage:"
          df -h

      - name: Upload Test Results
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        if: ${{ !cancelled() }}
        with:
          name: test-results-torch-models
          path: |
            ${{ env.INSTALL_TEST_DIR }}/TEST-torch*
          if-no-files-found: 'error'
